diff --git a/CCHMapClusterController Tests/CCHMapClusterControllerTests.m b/CCHMapClusterController Tests/CCHMapClusterControllerTests.m
index c004812..867fb02 100644
--- a/CCHMapClusterController Tests/CCHMapClusterControllerTests.m	
+++ b/CCHMapClusterController Tests/CCHMapClusterControllerTests.m	
@@ -333,6 +333,55 @@
     XCTAssertEqual(self.mapView.annotations.count, (NSUInteger)2);
 }
 
+- (void)testAddAnnotationsMinUniqueLocationsSmaller
+{
+    self.mapView.frame = CGRectMake(0, 0, 300, 300);
+    self.mapClusterController.marginFactor = 0;
+    self.mapClusterController.cellSize = 300;
+    
+    MKCoordinateRegion region = MKCoordinateRegionMake(CLLocationCoordinate2DMake(0, 0), MKCoordinateSpanMake(5, 5));
+    self.mapView.region = region;
+    self.mapClusterController.minUniqueLocationsForClustering = 1;
+    
+    MKPointAnnotation *annotation0 = [[MKPointAnnotation alloc] init];
+    annotation0.coordinate = CLLocationCoordinate2DMake(0, 0);
+    MKPointAnnotation *annotation1 = [[MKPointAnnotation alloc] init];
+    annotation1.coordinate = CLLocationCoordinate2DMake(0, 1.5);
+    MKPointAnnotation *annotation2 = [[MKPointAnnotation alloc] init];
+    annotation2.coordinate = CLLocationCoordinate2DMake(0, 0);
+    
+    __weak CCHMapClusterControllerTests *weakSelf = self;
+    [self.mapClusterController addAnnotations:@[annotation0, annotation1, annotation2] withCompletionHandler:^{
+        weakSelf.done = YES;
+    }];
+    XCTAssertTrue([self waitForCompletion:1.0]);
+    XCTAssertEqual(self.mapView.annotations.count, (NSUInteger)1);
+}
+
+- (void)testAddAnnotationsMinUniqueLocationsGreater
+{
+    self.mapView.frame = CGRectMake(0, 0, 300, 300);
+    self.mapClusterController.marginFactor = 0;
+    self.mapClusterController.cellSize = 300;
+    
+    MKCoordinateRegion region = MKCoordinateRegionMake(CLLocationCoordinate2DMake(0, 0), MKCoordinateSpanMake(5, 5));
+    self.mapView.region = region;
+    self.mapClusterController.minUniqueLocationsForClustering = 2;
+    
+    MKPointAnnotation *annotation0 = [[MKPointAnnotation alloc] init];
+    annotation0.coordinate = CLLocationCoordinate2DMake(0, 0);
+    MKPointAnnotation *annotation1 = [[MKPointAnnotation alloc] init];
+    annotation1.coordinate = CLLocationCoordinate2DMake(0, 1.5);
+    MKPointAnnotation *annotation2 = [[MKPointAnnotation alloc] init];
+    annotation2.coordinate = CLLocationCoordinate2DMake(0, 0);
+    
+    __weak CCHMapClusterControllerTests *weakSelf = self;
+    [self.mapClusterController addAnnotations:@[annotation0, annotation1, annotation2] withCompletionHandler:^{
+        weakSelf.done = YES;
+    }];
+    XCTAssertTrue([self waitForCompletion:1.0]);
+    XCTAssertEqual(self.mapView.annotations.count, (NSUInteger)2);
+}
 
 #if TARGET_OS_IPHONE
 - (void)testFadeInOut
diff --git a/CCHMapClusterController/CCHMapClusterController.h b/CCHMapClusterController/CCHMapClusterController.h
index bd8607e..113ca71 100644
--- a/CCHMapClusterController/CCHMapClusterController.h
+++ b/CCHMapClusterController/CCHMapClusterController.h
@@ -52,6 +52,9 @@
  have a unique location (default: `DBL_MAX`). */
 @property (nonatomic) double maxZoomLevelForClustering;
 
+/** The minimum number of unique locations to enable clustering for a cell (default: 1). */
+@property (nonatomic) NSUInteger minUniqueLocationsForClustering;
+
 /** Delegate to configure cluster annotations. */
 @property (nonatomic, weak) id<CCHMapClusterControllerDelegate> delegate;
 
diff --git a/CCHMapClusterController/CCHMapClusterController.m b/CCHMapClusterController/CCHMapClusterController.m
index 6901a53..05e0b58 100644
--- a/CCHMapClusterController/CCHMapClusterController.m
+++ b/CCHMapClusterController/CCHMapClusterController.m
@@ -171,7 +171,8 @@
                                                                                cellSize:self.cellSize
                                                                            marginFactor:self.marginFactor
                                                         reuseExistingClusterAnnotations:self.reuseExistingClusterAnnotations
-                                                              maxZoomLevelForClustering:self.maxZoomLevelForClustering];
+                                                              maxZoomLevelForClustering:self.maxZoomLevelForClustering
+                                                        minUniqueLocationsForClustering:self.minUniqueLocationsForClustering];
     operation.allAnnotationsMapTree = self.allAnnotationsMapTree;
     operation.visibleAnnotationsMapTree = self.visibleAnnotationsMapTree;
     operation.clusterer = self.clusterer;
diff --git a/CCHMapClusterController/CCHMapClusterOperation.h b/CCHMapClusterController/CCHMapClusterOperation.h
index dace9aa..880d76c 100644
--- a/CCHMapClusterController/CCHMapClusterOperation.h
+++ b/CCHMapClusterController/CCHMapClusterOperation.h
@@ -42,7 +42,7 @@
 @property (nonatomic, weak) id<CCHMapClusterControllerDelegate> clusterControllerDelegate;
 @property (nonatomic, weak) CCHMapClusterController *clusterController;
 
-- (id)initWithMapView:(MKMapView *)mapView cellSize:(double)cellSize marginFactor:(double)marginFactor reuseExistingClusterAnnotations:(BOOL)reuseExistingClusterAnnotation maxZoomLevelForClustering:(double)maxZoomLevelForClustering;
+- (id)initWithMapView:(MKMapView *)mapView cellSize:(double)cellSize marginFactor:(double)marginFactor reuseExistingClusterAnnotations:(BOOL)reuseExistingClusterAnnotation maxZoomLevelForClustering:(double)maxZoomLevelForClustering minUniqueLocationsForClustering:(NSUInteger)minUniqueLocationsForClustering;
 
 + (double)cellMapSizeForCellSize:(double)cellSize withMapView:(MKMapView *)mapView;
 + (MKMapRect)gridMapRectForMapRect:(MKMapRect)mapRect withCellMapSize:(double)cellMapSize marginFactor:(double)marginFactor;
diff --git a/CCHMapClusterController/CCHMapClusterOperation.m b/CCHMapClusterController/CCHMapClusterOperation.m
index 134ec0b..44d6b26 100644
--- a/CCHMapClusterController/CCHMapClusterOperation.m
+++ b/CCHMapClusterController/CCHMapClusterOperation.m
@@ -43,6 +43,7 @@
 @property (nonatomic, copy) NSArray *mapViewAnnotations;
 @property (nonatomic) BOOL reuseExistingClusterAnnotations;
 @property (nonatomic) double maxZoomLevelForClustering;
+@property (nonatomic) NSUInteger minUniqueLocationsForClustering;
 
 @property (nonatomic, getter = isExecuting) BOOL executing;
 @property (nonatomic, getter = isFinished) BOOL finished;
@@ -51,7 +52,7 @@
 
 @implementation CCHMapClusterOperation
 
-- (id)initWithMapView:(MKMapView *)mapView cellSize:(double)cellSize marginFactor:(double)marginFactor reuseExistingClusterAnnotations:(BOOL)reuseExistingClusterAnnotation maxZoomLevelForClustering:(double)maxZoomLevelForClustering
+- (id)initWithMapView:(MKMapView *)mapView cellSize:(double)cellSize marginFactor:(double)marginFactor reuseExistingClusterAnnotations:(BOOL)reuseExistingClusterAnnotation maxZoomLevelForClustering:(double)maxZoomLevelForClustering minUniqueLocationsForClustering:(NSUInteger)minUniqueLocationsForClustering
 {
     self = [super init];
     if (self) {
@@ -64,6 +65,7 @@
         _mapViewAnnotations = mapView.annotations;
         _reuseExistingClusterAnnotations = reuseExistingClusterAnnotation;
         _maxZoomLevelForClustering = maxZoomLevelForClustering;
+        _minUniqueLocationsForClustering = minUniqueLocationsForClustering;
         
         _executing = NO;
         _finished = NO;
@@ -95,7 +97,7 @@
     self.executing = YES;
     
     double zoomLevel = CCHMapClusterControllerZoomLevelForRegion(self.mapViewRegion.center.longitude, self.mapViewRegion.span.longitudeDelta, self.mapViewWidth);
-    BOOL disableClustering = (zoomLevel >= self.maxZoomLevelForClustering);
+    BOOL disableClustering = (zoomLevel > self.maxZoomLevelForClustering);
     BOOL respondsToSelector = [_clusterControllerDelegate respondsToSelector:@selector(mapClusterController:willReuseMapClusterAnnotation:)];
     
     // For each cell in the grid, pick one cluster annotation to show
@@ -111,6 +113,8 @@
                 annotationSets = CCHMapClusterControllerAnnotationSetsByUniqueLocations(allAnnotationsInCell);
                 disableClusterer = YES;
             } else {
+                // get unique locations up to min
+                // CCHMapClusterControllerAnnotationSetsByUniqueLocations(allAnnotationsInCell, min);
                 annotationSets = @[allAnnotationsInCell];
                 disableClusterer = CCHMapClusterControllerIsUniqueLocation(allAnnotationsInCell);
             }
